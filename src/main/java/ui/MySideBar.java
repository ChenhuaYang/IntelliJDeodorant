package ui;

import com.intellij.openapi.components.ProjectComponent;
import com.intellij.openapi.project.Project;
import com.intellij.psi.JavaPsiFacade;
import com.intellij.psi.search.GlobalSearchScope;
import com.intellij.ui.components.JBList;
import navigation.ReferenceNavigator;
import navigation.Reference;
import refactoring.MethodMover;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

public class MySideBar implements ProjectComponent {
    private JBList<Reference> list;
    private JPanel panel;
    private Project project;
    private final String panelTitle = "Candidates";
    private final String moveMenuItemName = "Move method";

    //TODO: Make panel scrollable
    MySideBar(Project project) {
        this.project = project;
        list.setCellRenderer(new ReferenceListCellRenderer());
        registerListeners();
        ((TitledBorder) panel.getBorder()).setTitle(panelTitle);
    }

    JPanel getPanel() {
        return panel;
    }

    void updateListItems(List<Reference> references) {
        list.removeAll();
        final Reference[] referencesArray = new Reference[references.size()];
        list.setListData(references.toArray(referencesArray));
        list.setCellRenderer(new ReferenceListCellRenderer());
        list.setSelectedIndex(references.size() > 0 ? 0 : -1);
    }

    private void registerListeners() {
        list.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent keyEvent) {
                if (keyEvent.getKeyCode() == KeyEvent.VK_ENTER && list.getSelectedIndex() != -1) {
                    new ReferenceNavigator((list.getSelectedValue())).navigateToReference(project);
                }
            }
        });

        list.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (list.getSelectedIndex() != -1) {
                    new ReferenceNavigator(list.getSelectedValue()).navigateToReference(project);
                }
            }
        });

        list.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e) && list.getSelectedIndex() != -1) {
                    if (list.getSelectedIndex() != -1) {
                        final JPopupMenu popupMenu = new JPopupMenu();
                        JMenuItem moveItem = new JMenuItem(moveMenuItemName);
                        moveItem.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                Reference reference = list.getSelectedValue();
                                MethodMover.moveMethod(
                                        project,
                                        reference.getPsiElement(),
                                        JavaPsiFacade.getInstance(project).findClass(reference.getTargetClassName(),
                                                GlobalSearchScope.allScope(project))
                                );
                            }
                        });
                        popupMenu.add(moveItem);
                        list.setComponentPopupMenu(popupMenu);
                    }
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new BorderLayout(0, 0));
        panel.setEnabled(true);
        panel.setBorder(BorderFactory.createTitledBorder(panelTitle));
        list = new JBList();
        panel.add(list, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}